h2 Welcome to the example of CourseWare usage

div.warning
  p
    h4 Visit repository of these examples for installation instructions
    ul
      li
        a(href="https://github.com/Angular-cz/courseware-examples", target="_blank") https://github.com/Angular-cz/courseware-examples

p There are prepared two simple Javascript exercises, and one empty for your experiments, try them to get the experience of using CourseWare

ul
  li #[strong 01-simple-generator]
  li #[strong 02-generator-with-tests]
  li #[strong 03-sandbox]

p.
  The first one wants you just follow the instruction, edit javascript file and check result in browser.

p.
  In the second one, you doesn't need to open browser, because you are writing exercise against tests and
  CourseWare can also visualise their results

p.
  Look at them, try to solve them, examine the package and all the information you can find in the text above.
  Because this intro page is not only introcuction to the course but also style galery and documentation, so enjoy :)

h2 Structure
p.
  CourseWare is meant to provide documentation of existing exercises,
  the most benefits will come when you use it on javascript lectures.
  But it can serve also as platform independent documentation tool, because it produces single #[strong index.html] file

p So if we speak about Javascript course, typical structure of exercise can look like those exercises - don't hasitate to examine code
ul
  li Exercises package has ussualy it own http-server which serves the content, same as this demo package
  li Also it can provide capability for running tests

ul
  li Every exercise has its own folder when there is html to run and some code to edit
  li There is also folder named #[strong complete] which contains complete code
  li You can have there configuration for karma runner #[strong karma.conf.js]
  li And least but not last you need some instructions, in our case written in jade.

p Structure then can look like this

snippet.
  |- 01-simple-generator
  |- 02-generator-with-tests
  |  |- complete
  |  |  |- app.js
  |  |  |- index.html
  |  |  |- todo.jade
  |  |
  |  |- app.js
  |  |- index.html
  |  |- karma.conf.js
  |
  |- gulpfile.js
  |- package.json

p.
  Students are then supposed to clone and install packge, start it, do the exercise according to
  instructions and they can check the results in his browser.

p.
  So if you need to generate instructions for students, CourseWare can help you with that, you just need to tell it
  which exercises it should document and where they have the instructions.

h3 Configuration file

p CourseWare is looking for file #[strong courseware.json], config file for this DEMO looks like that

snippet
  :highlight-json
    {
      "introFile": "courseware-intro.jade",
      "header": "CourseWare usage DEMO",
      "todoFilePath": "complete/todo.jade",
      "todos": [
        "01-simple-generator",
        "02-generator-with-tests"
      ]
    }

p Properties of #[strong courseware.json]
ul
  li #[strong introFile]: file with instructions for the homepage - this page
  li #[strong header]: the text on the top of materials
  li #[strong todoFilePath]: relative path to the instructions in exercise folder
  li #[strong todos]: ordered list of folders with exercises - folder name is also exercise name

p CourseWare then generates materials, use the given intro file as homepage, prepares list of exercises with instructions and let them be opened with #[strong Open Exercise] button

h2 CourseWare templates

p You can write instructions for CourseWare using
  a(href="http://jade-lang.com/", target="_blank")  Jade

ul
  li It is more comfortable as using plain HTML, have a small look on.
  li Main idea is that you do not write xml, but just tags where indentation creates hierarchy.
  li You can apply classes easily by just adding #[strong .classname] to the tag.
  li Attributes can be added into parenthesis #[strong a(href=...)].

p.
  Examine source code of instructions in examples and you will know how to use it in a minute.

h3 Common tags

p You will mostly depend on ordinary tags:
ul
  li #[strong h2 - hx] - headers for maintaining your hierarchy
  li #[strong p] - paragraphs for blocks of text
  li #[strong ul li ] - unordered lists for separated ideas

p
  | When using lists you can emphasis several items by using class #[strong .task], its usefull for separating
  |  information from tasks. Its possible to use the class on whole #[strong ul] or on particular #[strong li]

snippet.
  ul
    li simple information
    li.task task information

ul
  li simple information
  li simple information
  li.task task information

p Do not forget that every line begins with tag, if you want jade to interpret the inner text as block use:
  ul
    li #[strong .] for block
    li #[strong |] for single line

snippet.
  p.
    Multiple line text
    seperated just by new line


p When you want to use text emphasis like #[strong strong] or #[em em] inline instead of separate tag, you can utilize the jade syntax

snippet.
  &#35;[strong strong text]
  &#35;[em emphasis text]

h3 Bootstrap

p CourseWare use Twitter
  a(href="http://bootstrap.com", target="_blank")  Bootstrap
  | , and so can you, you can use ordinary Bootstrap classes

h4 Well

p Well ... commonly used class is #[strong well]

snippet.
  div.well The well can be really deep ... Alice

div.well The well can be really deep ... Alice

h4 Alerts

p CourseWare prepares styles #[strong info, alert, success, warning] which reffers to Bootstrap alert styles.

p Instead of

snippet.
  div.info.alert-info Info

p You can write simlified styles

snippet.
  div.info Info
  div.success Success
  div.warning Warning
  div.danger Danger

p And the result ...

div.info Info
div.success Success
div.warning Warning
div.danger Danger

h3 Courseware components
p CourseWare provides several components for the instructions to be more interactive

h4 hint

p When you need to allow some hint you can utilize **hint** element
ul
  li It is hidden by default and can be chown by click.

snippet.
  hint This is small hint for the exercise

hint This is small hint for the exercise

h4 snippet

p When you need to show some code content, the #[strong snipped] is just for you.
ul
  li As opposite to usning #[strong well] it has monospaced font

snippet.
  snippet.
    function generator(initialValue) {

      return function() {
        return initialValue++;
      };
    }

p Becomes

snippet.
  var gen1 = generator(0);

  console.log(gen1());
  console.log(gen1());
  console.log(gen1());

p Notice the dot at the and of snipped, which tells jade that this is block

h4 solution

p You can provide also solutions in your todo instructions by using #[strong solution]

ul
  li it is hidden by default and you can show it by clicking
  li you can see it as complement to #[strong snippet]

snippet.
  solution.
    function generator(initialValue) {

      return function() {
        return initialValue++;
      };
    }

p Becomes hidden block with link #[strong Show solution] on the right side

solution.
  function generator(initialValue) {

    return function() {
      return initialValue++;
    };
  }

h4 Escaping
p When you have HTML in #[strong solution, snippet] or in ordinary text, you should escape it.
ul
  li use #[strong :escape] for HTML
  li use #[strong :escape_ng] for snippetw which use handle bars curly braces
    :escape_ng  {{}}

pre
  code
    | snippet
    |   :escape
    |     <html>tags</html>

snippet
  :escape
    <html>tags</html>

h4 Highlight
p For highlighted source code, you can use :higlight filters. Filters use&nbsp;
  a(href='https://github.com/isagalaev/highlight.js') highlight.js
  | &nbsp;library.
ul
  li use #[strong :higlight] highlight with language autodetencion
  li use #[strong :higlight-js] for JavaScript
  li use #[strong :higlight-json] for json code
  li use #[strong :higlight-html] or #[strong :higlight-xml] for html and xml code

h5 :highlight
pre
  code
    | snippet
    |   :highlight
    |     <html>tags</html>

snippet
  :highlight
    <html>tags</html>

pre
  code
    | snippet
    |   :highlight
    |     function someFunction(some value) {
    |       return 42;
    |     }

snippet
  :highlight
    function someFunction(some value) {
      return 42;
    }

h5 :highlight-js
pre
  code
    | snippet
    |   :highlight-js
    |      function someFunction(some value) {
    |         return 42;
    |      }

snippet
  :highlight-js
    function someFunction(some value) {
      return 42;
    }

h5 :highlight-json
pre
  code
    | snippet
    |   :highlight-json
    |     {
    |       "js": "javascript",
    |       "json": "json",
    |       "xml": "xml",
    |       "html": "html"
    |      }

snippet
  :highlight-json
    {
      "js": "javascript",
      "json": "json",
      "xml": "xml",
      "html": "html"
    }

h2 Test results visualization

p.
  If you want your students to write code against tests, its possible to integrate this also with CourseWare.
  Look at second exercises which leeds you to work against tests and visualize your progress.

p This visualization is dynamic and shows the current status of tests, you have to understand several things to get this to work

p.
  You can see that there is utilized an #[strong tests] component which let you to show test results of your tests.

h3 tests

p.
  This component analyze results and try to find information that some tests are associated with some todo,
  you can do that by #[strong todo] parameter

p.
  Test message has to contain string with todo identification #[strong (TODO 1.1)].
  This string can be containd in name or in the suit name.

snippet.
  tests

div(ng-if="true",ng-init='tests = {"results": { "total": 4, "passed": 1, "tests": [ { "name": "generatorFactory is a function (TODO 1)", "type": "PASSED" }, { "name": "generatorFactory return function when call (TODO 2.1)", "type": "FAILED" }, { "name": "generator with 0 as initialValue return 0 as first value (TODO 2.2)", "type": "FAILED" }, { "name": "generator with 0 as initialValue return incremented values as next (TODO 2.2)", "type": "FAILED" } ] } }')
  include node_modules/angular-cz-courseware/jade/directives/tests

snippet.
  tests(todo="1")

div(ng-if="true",ng-init='tests = {"results": { "total": 1, "passed": 0, "tests": [ { "name": "generatorFactory is a function (TODO 1)", "type": "FAILED" } ] } }')
  include node_modules/angular-cz-courseware/jade/directives/tests

snippet.
  tests(todo="2")

div(ng-if="true",ng-init='tests = {"results": { "total":3, "passed": 0, "tests": [ { "name": "generatorFactory return function when call (TODO 2.1)", "type": "FAILED" }, { "name": "generator with 0 as initialValue return 0 as first value (TODO 2.2)", "type": "FAILED" }, { "name": "generator with 0 as initialValue return incremented values as next (TODO 2.2)", "type": "FAILED" } ] } }')
  include node_modules/angular-cz-courseware/jade/directives/tests
div.note
  | By default, todos are selected as hierarchy.
  snippet.
    tests(todo="2")           # displays tests with (TODO 2), (TODO 2.1), (TODO 2.1.1), (TODO 2.2) ...

  | If you want select todo only if name is exactly the same, use attribute #[strong exact]
  snippet.
    tests(todo="2", exact)    # displays tests with (TODO 2)

  | For display tests without todos, use attribute #[strong without-todo]
  snippet.
    tests(without-todo)    # displays tests with (TODO 2)

h3 tests-results
p.
  #[strong Tests-results] component is intended for displaying summary. By default it shows all tests

snippet.
  tests-results

div(ng-if="true",ng-init='tests = {"showTests": true, "results": { "total": 4, "passed": 1, "tests": [ { "name": "generatorFactory is a function (TODO 1)", "type": "PASSED" }, { "name": "generatorFactory return function when call (TODO 2.1)", "type": "FAILED" }, { "name": "generator with 0 as initialValue return 0 as first value (TODO 2.2)", "type": "FAILED" }, { "name": "generator with 0 as initialValue return incremented values as next (TODO 2.2)", "type": "FAILED" } ] } }')
  include node_modules/angular-cz-courseware/jade/directives/tests-results

p Tests can be hidden by using attribute #[strong title-only]

snippet.
  tests-results(title-only)

div(ng-if="true",ng-init='tests = {"showTests": false, "results": { "total": 4, "passed": 1} }')
  include node_modules/angular-cz-courseware/jade/directives/tests-results

h3 Test results reports

p Test results visualization needs json report to be results saved as json in format of #[strong karma-spec-json-reporter]

p See its documentation
  a(target="_blank", href = "https://www.npmjs.com/package/karma-spec-json-reporter")  karma-spec-json-reporter npm package

h3 Configuration of test results visualization

p.
  In configuration you have to specify the socket where CourseWare listens about test-results changes and the
  directory where test-results will be stored.

snippet.
  "testsSocket" : true,
  "testsResultsPath" : "test-results"

ul
  li #[strong testsSocket]: tells CourseWare to run socket server. Optionaly you can provide #[strong testsSocketUrl] - url when where CourseWare will listen
  li #[strong testsResultsPath]: folder where your tests-results will be stored and CourseWare socket server will look there.

h3 Socket server

p.
  CourseWare provides you capability to watch test results path and notify application.
  You can use this in your host package and connect it to your http server.

ul
  li See this package and its #[strong gulpfile.js]

snippet
  :highlight
    gulp.task('connect', ['initialize-tests'], function(cb) {

      console.log("Http-server running on http://localhost:" + config.httpServer.port);

      var app = connect();

      app.use(serveStatic('./'));

      var server = app.listen(config.httpServer.port);

      // connect test results visualization socket server
      courseware.socketServer(server);
      cb();
    });

    // initialize tests results json files
    gulp.task('initialize-tests', function(cb) {
      var currentKarmaServer = require("karma").Server;
      courseware.initializeTestResults(currentKarmaServer, cb);
    });

p.
  You can see here running socket server and initialization of tests by methods from courseware package.

p.
  The task #[strong initialize-tests] ensure that test results already exists before socket server is started,
  for the watch to work reliable

ul
  li method which connects socket server to your server, watch test results path and send results to clients
    snippet.
      courseware.socketServer(server);

  li
    | method which check existence of #[strong karma.conf.js] in exercises and run them using karma server from host package,
    |  reason of this is thata every package can have specific karma configurations.
    |  if you do not use karma server, ommit this.
    snippet.
      courseware.initializeTestResults(currentKarmaServer, cb);

h3 Karma integration

p Probably you use some kind of test runner for your tests, so here you can see how it is integrated with popular Karma test runner

snippet.
  module.exports = function(config) {

     ...

      // reporter which is needed for courseware
      config.plugins.push('karma-spec-json-reporter');
      config.reporters.push('specjson');

      var courseware = require("angular-cz-courseware");

      // ensure that directory exists
      var testResultsDir = courseware.getTestResultsDir();

      if (!fs.existsSync(testResultsDir)){
        fs.mkdirSync(testResultsDir);
        console.log('Directory for test results has been created: ' + testResultsDir);
      }

      // get filename for exercise
      var exerciseName = courseware.determineExerciseName(config);
      var outPath = courseware.getTestResultsFilename(exerciseName);

      config.specjsonReporter = {
        outputFile: outPath
      };
  };

p You can see that there is utilized reporter #[strong karma-spec-json-reporter] which reports test results to paritcular directory

p Module courseware provides you several convenient methods for this configuration

ul
  li method for getting dir name where test results will appear
    snippet.
      var testResultsDir = courseware.getTestResultsDir(); // path/test-results

  li method for creating filename from exercise name
    snippet.
      var outPath = courseware.getTestResultsFilename(exerciseName); // path/test-results/01-simple-generator.json

  li method for determining exercise name from config, it tries to compare folder name where was karma runner started
    | or location of configFile, this is crucial for IDE integration which sometimes cover the original configFile
  snippet.
    var exerciseName = courseware.determineExerciseName(config); // 01-simple-generator

h2 Development of your materials

p.
  Now you know almost everything about CourseWare. One thing about development your materials is missing.
  You can start development server with command

snippet.
  npm run devel

p The command will start server, watch all your exercises and files with instruction and provide livereload capability.
  ul
    li in this package all #[strong */complete/todo] and #[strong courseware-intro.jade]

p. The server runs on the url

snippet.
  http://localhost:8080

p.
  So now you can try to add prepared exercise #[strong 03-sandbox] into #[strong courseware.json], run development server and examine CourseWare capabilities.



